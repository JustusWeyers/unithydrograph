[{"name":"server.R","content":"#\r\n# This is the server logic of a Shiny web application. You can run the\r\n# application by clicking 'Run App' above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\n\r\n# Define server logic required to draw a histogram\r\nfunction(input, output, session) {\r\n  \r\n  ### Values\r\n  \r\n  input_vals = shiny::reactiveValues(\r\n    SystemInput = demo_SystemInput,\r\n    SystemOutput = demo_SystemOutput,\r\n    area = demo_area,\r\n    bf = demo_bf,\r\n    rain = demo_rain\r\n  )\r\n  \r\n  vals = shiny::reactiveValues(\r\n    SystemInput = demo_SystemInput,\r\n    SystemOutput = demo_SystemOutput,\r\n    area = demo_area,\r\n    bf = demo_bf,\r\n    rain = demo_rain\r\n  )\r\n  \r\n  ### Serverlogic\r\n  \r\n  ### 1. Input stuff\r\n  \r\n  shiny::observe({\r\n    if (!is.null(input$ui_SystemInput)) {\r\n      input_vals[[\"SystemInput\"]] = rhandsontable::hot_to_r(input$ui_SystemInput)\r\n    }\r\n  })\r\n  \r\n  shiny::observe({\r\n    if (!is.null(input$ui_SystemOutput)) {\r\n      input_vals[[\"SystemOutput\"]] = rhandsontable::hot_to_r(input$ui_SystemOutput)\r\n    }\r\n  })\r\n  \r\n  shiny::observe({\r\n    if (!is.null(input$ui_rain)) {\r\n      input_vals[[\"rain\"]] = rhandsontable::hot_to_r(input$ui_rain)\r\n    }\r\n  })\r\n  \r\n  shiny::observeEvent(input$demo_data, {\r\n    input_vals$SystemInput = demo_SystemInput\r\n    input_vals$SystemOutput = demo_SystemOutput\r\n    input_vals$area = demo_area\r\n    input_vals$bf = demo_bf\r\n    input_vals$rain = demo_rain\r\n  })\r\n\r\n  shiny::observeEvent(input$clear_input, {\r\n    input_vals$SystemInput = empty_df(r = 5, c = 2, cn = c(\"t\", \"P_eff\"))\r\n    input_vals$SystemOutput = empty_df(r = 17, c = 2, cn = c(\"t\", \"Q\"))\r\n    input_vals$area = 0\r\n    input_vals$bf = NA\r\n    input_vals$rain = empty_df(r = 3, c = 2, cn = c(\"t\", \"P_eff\"))\r\n    vals$SystemInput = NULL\r\n    vals$SystemOutput = NULL\r\n    vals$area = NULL\r\n    vals$bf = NULL\r\n  })\r\n  \r\n  shiny::observeEvent(input$run, {\r\n    vals$SystemInput = input_vals$SystemInput\r\n    vals$SystemOutput = input_vals$SystemOutput\r\n    vals$area = input_vals$area\r\n    vals$bf = input_vals$bf\r\n  })\r\n  \r\n  dt = shiny::reactive(\r\n    unique(diff(input_vals$SystemOutput$t))\r\n  )\r\n  \r\n  ### 2. Methode\r\n  \r\n  ### 2.1 Basisabfluss und Direktabfluss\r\n  \r\n  t = shiny::reactive(\r\n    if (!is.null(vals$SystemOutput)) {\r\n      vals$SystemOutput$t\r\n    }\r\n  )\r\n  \r\n  Q_B = shiny::reactive({\r\n    if (!is.null(vals$SystemOutput)) {\r\n      q = vals$SystemOutput\r\n      q$Q_B = q$Q\r\n      q$Q_B[q$t > input$bfslider[1] & q$t < input$bfslider[2]] = NA\r\n      q$Q_B = data.frame(zoo::na.approx(q, x = q$t))$Q_B\r\n      return(q$Q_B)\r\n    }\r\n  })\r\n  \r\n  Q_D = shiny::reactive({\r\n    if (!is.null(Q_B())) {\r\n      qd = vals$SystemOutput$Q - Q_B()\r\n      f = 3600 * 1000/(vals$area * 10**6) \r\n      return(qd*f)\r\n    }\r\n  })\r\n  \r\n  ### 2.2 Überprüfen der Volumina\r\n  \r\n  # Volumen P_eff\r\n  V_Peff = shiny::reactive(\r\n    sum(vals$SystemInput$P_eff) * vals$area * 1000 * dt()\r\n  )\r\n  \r\n  # Volumen Q_d\r\n  V_QD = shiny::reactive(\r\n    sum(sapply(X = 1:(length(Q_D())-1), FUN = function(i) {\r\n      0.5 * (Q_D()[i] + Q_D()[i+1])\r\n    })) * vals$area * 1000 * dt()\r\n  )\r\n  \r\n  V_quot = shiny::reactive(\r\n    V_Peff()/V_QD()\r\n  )\r\n  \r\n  ### 2.3 Systemidentifikation\r\n\r\n  # Niederschlagsordinaten  \r\n  precip = shiny::reactive({\r\n    precip = vals$SystemInput$P_eff\r\n    precip[precip == 0.0] = NA\r\n    return(vals$SystemInput$P_eff[!is.na(zoo::na.approx(precip, na.rm = FALSE))])\r\n  })\r\n  \r\n  # Anzahl der Niederschlagsordinaten\r\n  m = shiny::reactive(length(precip()))\r\n  \r\n  # Abflussordinaten\r\n  disch = shiny::reactive({\r\n    disch = Q_D()\r\n    disch[disch == 0.0] = NA\r\n    return(Q_D()[!is.na(zoo::na.approx(disch, na.rm = FALSE))])\r\n  })\r\n  \r\n  # Anzahl der Ordinaten des Abflusses\r\n  r = shiny::reactive({length(disch())})\r\n  \r\n  # Anzahl UH - Ordinaten\r\n  n = shiny::reactive({r() - m() + 1})\r\n  \r\n  # UH-Matrix\r\n  UHM = shiny::reactive({\r\n    # Leere Matrix\r\n    uhm = matrix(0, nrow = r(), ncol = m())\r\n    # Auffüllen\r\n    for (i in 1:m()) {\r\n      uhm[i:(i+n()-1),i] = rep(vals$SystemInput$P_eff[i], n())\r\n    }\r\n    return(uhm)\r\n  }) \r\n  \r\n  # Näherungslösung mit Hilfe kleinster Quadrate\r\n  \r\n  sq = shiny::reactive({\r\n    lsq(disch(), UHM(), precip(), k_ = n(), m = m())\r\n  })\r\n  \r\n  U = shiny::reactive({\r\n    df = data.frame(\r\n      row.names = paste0(\"U_\", 1:n()),\r\n      U = solve(sq()$A, sq()$b)\r\n    )\r\n    df$U_norm = df$U * 1/sum(df$U) * 1/dt()\r\n    return(df)\r\n  })\r\n  \r\n  ### 2.4 Faltung\r\n  \r\n  # Berechnung Niederschagsdauer\r\n  rain = shiny::reactive({\r\n    precip = input_vals$rain$P\r\n    precip[precip == 0.0] = NA\r\n    return(input_vals$rain$P[!is.na(zoo::na.approx(precip, na.rm = FALSE))])\r\n  })\r\n  \r\n  n_rain = shiny::reactive(length(rain()))\r\n  \r\n  \r\n  folds = shiny::reactive({\r\n    folds = matrix(unlist(lapply(input_vals$rain$P, function(p) {\r\n      p * U()$U_norm * dt()\r\n    })), nrow = nrow(input_vals$rain), byrow = TRUE)\r\n    \r\n    B = matrix(0, nrow = nrow(folds) + ncol(folds), ncol = ncol(folds))\r\n    \r\n    for (i in 1:ncol(folds)) {\r\n      B[i:(i+n_rain()-1), i] = folds[1:n_rain(),i]\r\n    }\r\n    return(B)\r\n  })\r\n  \r\n  discharge = shiny::reactive({\r\n    t = 1:nrow(folds()) * dt()\r\n    r = input_vals$rain\r\n    f = 3600 * 1000/(vals$area * 10**6)\r\n    Q = rowSums(folds()) * 1/f\r\n    \r\n    d = data.frame(\r\n      t = t,\r\n      r = rep(0, length(t)),\r\n      Q = Q\r\n    )\r\n    d$r[1:length(r)] = r\r\n    return(d)\r\n  })\r\n\r\n  ### Output\r\n  output$ui_SystemInput <- rhandsontable::renderRHandsontable({\r\n    if (!is.null(input_vals[[\"SystemInput\"]]))\r\n      rhandsontable::rhandsontable(input_vals[[\"SystemInput\"]], useTypes = TRUE, stretchH = \"all\")\r\n  })\r\n  \r\n  output$ui_SystemOutput <- rhandsontable::renderRHandsontable({\r\n    if (!is.null(input_vals[[\"SystemOutput\"]]))\r\n      rhandsontable::rhandsontable(input_vals[[\"SystemOutput\"]], useTypes = TRUE, stretchH = \"all\")\r\n  })\r\n  \r\n  output$ui_datainput_plot = shiny::renderPlot(\r\n    if (!is.null(input_vals[[\"SystemInput\"]])) {\r\n      tryCatch({\r\n        return(datainput_plot(inp = input_vals[[\"SystemInput\"]], outp = input_vals[[\"SystemOutput\"]], bf = input$bfslider))\r\n      }, error = function(e) {\r\n        return(plot.new())\r\n      })\r\n    },\r\n    height = 520\r\n  )\r\n  \r\n  output$ui_area = shiny::renderUI(\r\n    shiny::numericInput(\r\n      inputId = \"area\",\r\n      label =\"Area [km^2]\",\r\n      value = input_vals$area\r\n    )\r\n  )\r\n  \r\n  output$ui_bfslider = shiny::renderUI({\r\n    if (!any(is.na(input_vals$bf))) {\r\n      shiny::sliderInput( \r\n        \"bfslider\", \r\n        \"Seperate Baseflow\", \r\n        min = min(input_vals[[\"SystemOutput\"]]$t), max = max(input_vals[[\"SystemOutput\"]]$t), \r\n        value = input_vals$bf,\r\n        step = dt(),\r\n      )\r\n    }\r\n  })\r\n  \r\n  output$ui_table = shiny::renderTable(\r\n    if (!is.null(vals$SystemInput)) {\r\n      return(U())\r\n    }\r\n  )\r\n  \r\n  output$ui_Q_table = shiny::renderTable(\r\n    data.frame(\r\n      t = t(),\r\n      Q = vals$SystemOutput$Q,\r\n      Q_B = Q_B(),\r\n      Q_D = Q_D()\r\n    )\r\n  )\r\n  \r\n  output$ui_disch = shiny::renderTable(\r\n    data.frame(d = disch()), \r\n    colnames = FALSE, \r\n    bordered = TRUE,\r\n    digits = 3,\r\n    width = 12\r\n  )\r\n  \r\n  output$ui_UHM = shiny::renderTable(\r\n    UHM(), \r\n    colnames = FALSE, \r\n    bordered = TRUE,\r\n    digits = 3,\r\n    width = 12\r\n  )\r\n  \r\n  output$ui_lsqA = shiny::renderTable(\r\n    sq()$A,\r\n    colnames = FALSE, \r\n    bordered = TRUE,\r\n    digits = 2\r\n  )\r\n  \r\n  output$ui_lsqb = shiny::renderTable(\r\n    sq()$b,\r\n    colnames = FALSE, \r\n    bordered = TRUE,\r\n    digits = 3\r\n  )\r\n    \r\n  output$ui_calculations = shiny::renderUI(\r\n    if (!is.null(vals$SystemInput)) {\r\n      shiny::tagList(\r\n        h2(\"Calculations\"),\r\n        shiny::fluidRow(\r\n          col_4(\r\n            shinydashboard::box(\r\n              title = \"Discharge separation\", width = 12,\r\n              shiny::tableOutput(\"ui_Q_table\")\r\n            )\r\n          ),\r\n          col_8(\r\n            shinydashboard::box(\r\n              title = \"Volume contoll\", width = 12,\r\n              shiny::HTML(paste(\"Volume of effective preciptiation: <b>\", V_Peff(), \"m^3<\/b><br>\")),\r\n              shiny::HTML(paste(\"Volume of direct discharge: <b>\", V_QD(), \"m^3<\/b><br>\")),\r\n              shiny::HTML(paste(\"Ratio: <b>\", V_Peff()/V_QD(), \"<\/b><br>\"))\r\n            ),\r\n            \r\n            shinydashboard::box(\r\n              title = \"UH-Matrix\", width = 12,\r\n              div(shiny::tableOutput(\"ui_disch\"), style=\"float:left\"),\r\n              div(shiny::tableOutput(\"ui_UHM\"), style=\"margin-left:0.5%; float:left\")\r\n            )\r\n          ),\r\n          col_12(\r\n            shinydashboard::box(\r\n              title = \"LSQ-Matrix\", width = 12,\r\n              div(shiny::tableOutput(\"ui_lsqA\"), style=\"float:left\"),\r\n              div(shiny::tableOutput(\"ui_lsqb\"), style=\"margin-left:0.5%; float:left\")\r\n            )\r\n          )\r\n        )\r\n      )\r\n    }\r\n  )\r\n  \r\n  output$ui_U = shiny::renderTable(\r\n    U(),\r\n    digits = 4,\r\n    rownames = TRUE\r\n  )\r\n  \r\n  output$ui_rain <- rhandsontable::renderRHandsontable({\r\n    if (!is.null(input_vals[[\"rain\"]]))\r\n      rhandsontable::rhandsontable(input_vals[[\"rain\"]], useTypes = TRUE, stretchH = \"all\")\r\n  })\r\n  \r\n  output$ui_dischargeresponse = shiny::renderPlot({\r\n    datainput_plot(inp = input_vals$rain, outp = discharge())\r\n  })\r\n  \r\n  output$ui_unithydrograph = shiny::renderUI(\r\n    if (!is.null(vals$SystemInput)) {\r\n      shiny::tagList(\r\n        h2(\"Results\"),\r\n        shiny::fluidRow(\r\n          col_3(\r\n            shinydashboard::box(\r\n              title = \"UH-Ordinates\", width = 12,\r\n              div(shiny::tableOutput(\"ui_U\"), style=\"float:left\")\r\n            )\r\n          ),\r\n          col_3(\r\n            shinydashboard::box(\r\n              title = \"Rainfall event\", width = 12,\r\n              p(\"Table 3: Effective precipitation [mm/h] over time [h].\"),\r\n              rhandsontable::rHandsontableOutput(\"ui_rain\")\r\n            )\r\n          ),\r\n          col_6(\r\n            shinydashboard::box(\r\n              title = \"Discharge response\", width = 12,\r\n              p(\"Figure 2: Discharge response based on UH.\"),\r\n              shiny::plotOutput(\"ui_dischargeresponse\", height = 300)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    }\r\n  )\r\n  \r\n}\r\n","type":"text"},{"name":"ui.R","content":"#\r\n# This is the user-interface definition of a Shiny web application. You can\r\n# run the application by clicking 'Run App' above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nfluidPage(\r\n  \r\n  ### Title \"Muskingum Application\"\r\n  \r\n  shiny::fluidRow(\r\n    shiny::titlePanel(\"Unit Hydrograph\")\r\n  ),\r\n  \r\n  \r\n  ### Data input\r\n  \r\n  h2(\"Data input\"),\r\n\r\n  shiny::fluidRow(\r\n    col_4(\r\n      shinydashboard::box(\r\n        title = \"Effective precipitation\", width = 12,\r\n        p(\"Table 1: Effective precipitation [mm/h] as system-input.\"),\r\n        rhandsontable::rHandsontableOutput(\"ui_SystemInput\")\r\n      ),\r\n      shinydashboard::box(\r\n        title = \"\", width = 12, height = 203,\r\n        shiny::uiOutput(\"ui_area\"),\r\n        shiny::uiOutput(\"ui_bfslider\")\r\n      ),\r\n      col_4(\r\n        shiny::actionButton(\"clear_input\", \"Clear input\")\r\n      ), col_5(\r\n        shiny::actionButton(\"demo_data\", \"Use demo data\")\r\n      ), col_3(\r\n        shiny::actionButton(\"run\", \"Run\", class = \"btn-warning\")\r\n      )\r\n    ),\r\n    col_3(\r\n      shinydashboard::box(\r\n        title = \"Discharge\", width = 12,\r\n        p(\"Table 2: System-output in [m^3/s].\"),\r\n        rhandsontable::rHandsontableOutput(\"ui_SystemOutput\")\r\n      )\r\n    ),\r\n    col_5(\r\n      shiny::plotOutput(\"ui_datainput_plot\")\r\n    )\r\n  ),\r\n  \r\n  ### Calculations\r\n  \r\n  shiny::uiOutput(\"ui_calculations\"),\r\n  \r\n  ### Unit Hydrograph\r\n  \r\n  shiny::uiOutput(\"ui_unithydrograph\"),\r\n\r\n)\r\n","type":"text"},{"name":"functions.R","content":"\r\ndatainput_plot = function(inp, outp, bf = NA) {\r\n  x    = inp$t\r\n  y    = inp$P_eff\r\n  barW = unique(diff(inp$t))\r\n  \r\n  p = {\r\n    plot(x = outp$t, y = outp$Q, \"l\", axes = FALSE,\r\n         xlab = \"Time t [h]\",\r\n         ylab = \"P_eff [mm/h] / Q [m^3/s]\",\r\n         ylim = c(0, max(outp$Q)*1.125)\r\n         )\r\n    rect(\r\n      xleft = x, \r\n      ybottom=0, \r\n      xright=x + barW, \r\n      ytop = y, \r\n      col = \"lightblue\",\r\n      border = \"white\"\r\n    )\r\n    lines(x = outp$t, y = outp$Q)\r\n    points(x = outp$t, y = outp$Q)\r\n    text(x = outp$t, y = outp$Q, labels=round(outp$Q, 3), cex= 0.7, adj = c(-0.25, -0.25))\r\n\r\n    if (!any(is.na(bf))) {\r\n      segments(\r\n        x0 = bf[1], y0 = outp$Q[outp$t == bf[1]],  \r\n        x1 = bf[2], y1 = outp$Q[outp$t == bf[2]],\r\n        col = \"red\"\r\n      )\r\n    }\r\n    axis(1, at = outp$t)\r\n    axis(2)\r\n  }\r\n  return(p)\r\n}\r\n\r\n# An ugly but (hopefully) working Function\r\nlsq = function(QD, UHM, P, k_, m) {\r\n  mirror = matrix(unlist(lapply(1:k_, function(k) {\r\n    lim = (k + m - 1)\r\n    mat = matrix(unlist(lapply(k:lim, function(i) {\r\n      c(QD[i], -1 * UHM[i,]) * -P[i-(k-1)]\r\n    })), nrow = m, byrow = TRUE)\r\n    b = -1 * mat[,1]\r\n    A = t(mat[,2:ncol(mat)])\r\n    dFs = c(rep(0, times = k-1), sum(diag(A)))\r\n    for (i in 2:ncol(A)) {\r\n      A = A[-nrow(A), -1]\r\n      dFs = c(dFs, sum(diag(A)))\r\n    }\r\n    dFs = c(dFs, rep(0, max(k_)-k), sum(b))\r\n    return(dFs)\r\n  })), nrow = k_, byrow = TRUE)\r\n  b =  mirror[,ncol(mirror)]\r\n  mirror = mirror[,1:k_]\r\n  lower = t(mirror * upper.tri(mirror))\r\n  mirror = mirror + lower\r\n  return(list(A = mirror, b = b))\r\n}\r\n\r\n### Standard\r\n\r\nempty_df = function(r, c, cn) {\r\n  df = data.frame(matrix(NA_real_, nrow = r, ncol = c))\r\n  colnames(df) = cn\r\n  return(df)\r\n}\r\n\r\ncol_1 = function(...) {\r\n  shiny::column(1, ...)\r\n}\r\n\r\ncol_2 = function(...) {\r\n  shiny::column(2, ...)\r\n}\r\n\r\ncol_3 = function(...) {\r\n  shiny::column(3, ...)\r\n}\r\n\r\ncol_4 = function(...) {\r\n  shiny::column(4, ...)\r\n}\r\n\r\ncol_5 = function(...) {\r\n  shiny::column(5, ...)\r\n}\r\n\r\ncol_6 = function(...) {\r\n  shiny::column(6, ...)\r\n}\r\n\r\ncol_8 = function(...) {\r\n  shiny::column(8, ...)\r\n}\r\n\r\ncol_10 = function(...) {\r\n  shiny::column(10, ...)\r\n}\r\n\r\ncol_12 = function(...) {\r\n  shiny::column(12, ...)\r\n}","type":"text"},{"name":"global.R","content":"# \r\n# demo_SystemInput = data.frame(\r\n#   t = c(0.0, 0.5, 1.0, 1.5, 2.0),\r\n#   P_eff = c(14.6, 19.5, 0.0, 29.3, 0.0)\r\n# )\r\n# \r\n# demo_SystemOutput = data.frame(\r\n#   t = seq(0, 8, by = 0.5),\r\n#   Q = c(\r\n#     0.5, 12.9, 31.2, 25.1, 35.0, 32.5, 13.4, 5.56, 2.53, 1.43, 1.11, 0.80,\r\n#     0.74, 0.71, 0.66, 0.65, 0.64\r\n#   )\r\n# )\r\n# \r\n# demo_area = 8.762\r\n# demo_bf = c(0, 5.5)\r\n# \r\n# demo_rain= data.frame(\r\n#   t = c(0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5),\r\n#   P_eff = c(50.0, 30.0, 20.0, 0, 0, 0, 0, 0, 0)\r\n# )\r\n\r\n#### J ----\r\n\r\ndemo_SystemInput = data.frame(\r\n  t = c(1, 2, 3, 4, 5),\r\n  P_eff = c(2.7, 3.3, 2.1, 5.7, 4.4)\r\n)\r\n\r\ndemo_SystemOutput = data.frame(\r\n  t = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),\r\n  Q = c(\r\n    2.4, 4.4, 18.5, 28.6, 31.8, 49.5, 50.5, 29.9, 17.7, 10.6, 5.0, 2.4\r\n  )\r\n)\r\n\r\ndemo_area = 43\r\ndemo_bf = c(0, 11)\r\n\r\ndemo_rain= data.frame(\r\n  t = c(0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5),\r\n  P_eff = c(50.0, 30.0, 20.0, 0, 0, 0, 0, 0, 0)\r\n)\r\n\r\n# #### M ----\r\n# \r\n# demo_SystemInput = data.frame(\r\n#   t = c(1, 2, 3, 4, 5),\r\n#   P_eff = c(4.1, 3.8, 3.7, 4.4, 1.7)\r\n# )\r\n# \r\n# demo_SystemOutput = data.frame(\r\n#   t = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),\r\n#   Q = c(\r\n#     1.7, 14.5, 28.3, 39.8, 46.5, 42.5, 30.5, 16.8, 8.1, 4.1, 2.2, 1.7\r\n#   )\r\n# )\r\n# \r\n# demo_area = 45\r\n# demo_bf = c(0, 11)\r\n# \r\n# demo_rain= data.frame(\r\n#   t = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\r\n#   P_eff = c(0.04, 0.06, 0.1, 0.14, 0.16, 0.16, 0.14, 0.1, 0.06, 0.04) * 95\r\n# )\r\n\r\nsource(\"functions.R\")\r\n","type":"text"}]
